# define directive
snippet def
	-define(${1:macro}, ${2:body}).${3}
# export directive
snippet exp
	-export([${1:function}/${2:arity}]).
# include directive
snippet inc
	-include("${1:file}").${2}
# behavior directive
snippet beh
	-behaviour(${1:behaviour}).${2}
# if expression
snippet if
	if
	    ${1:guard} ->
	        ${2:body}
	end
# case expression
snippet case
	case ${1:expression} of
	    ${2:pattern} ->
	        ${3:body};
	end
# anonymous function
snippet fun
	fun (${1:Parameters}) -> ${2:body} end${3}
# try...catch
snippet try
	try
	    ${1}
	catch
	    ${2:_:_} -> ${3:got_some_exception}
	end
# record directive
snippet rec
	-record(${1:record}, {
	    ${2:field}=${3:value}}).${4}
# todo comment
snippet todo
	%% TODO: ${1}
## Snippets below (starting with '%') are in EDoc format.
## See http://www.erlang.org/doc/apps/edoc/chapter.html#id56887 for more details
# doc comment
snippet %d
	%% @doc ${1}
# end of doc comment
snippet %e
	%% @end
# specification comment
snippet %s
	%% @spec ${1}
# private function marker
snippet %p
	%% @private


snippet doc
	%% -----------------------------------------------------------------------------
	%% @doc
	%% @end
	%% -----------------------------------------------------------------------------
# OTP application
snippet module_application
	-behaviour(application).

	-export([start/2, stop/1]).

	start(_Type, _StartArgs) ->
	    case ${2:root_supervisor}:start_link() of
	        {ok, Pid} ->
	            {ok, Pid};
	        Other ->
		          {error, Other}
	    end.

	stop(_State) ->
	    ok.
# OTP gen_server
snippet module_gen_server
	-behaviour(gen_server).

	%% API
	-export([
	         start_link/0
	        ]).

	%% gen_server callbacks
	-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
	         terminate/2, code_change/3]).

	-record(state, {}).

	%%%===================================================================
	%%% API
	%%%===================================================================

	start_link() ->
	    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

	%%%===================================================================
	%%% gen_server callbacks
	%%%===================================================================

	init([]) ->
	    {ok, #state{}}.

	handle_call(_Request, _From, State) ->
	    Reply = ok,
	    {reply, Reply, State}.

	handle_cast(_Msg, State) ->
	    {noreply, State}.

	handle_info(_Info, State) ->
	    {noreply, State}.

	terminate(_Reason, _State) ->
	    ok.

	code_change(_OldVsn, State, _Extra) ->
	    {ok, State}.

	%%%===================================================================
	%%% private parts
	%%%===================================================================

snippet module_doc
      %%%-------------------------------------------------------------------
      %%% @author bnjm
      %%% @copyright (C) $CURRENT_YEAR, leftshift.one software gmbh
      %%% @doc
      %%% 
      %%% @end
      %%% Created : $CURRENT_DATE. $CURRENT_MONTH_NAME_SHORT $CURRENT_YEAR
      %%%-------------------------------------------------------------------
      -module($TM_FILENAME_BASE).
      
      -author("bnjm").

snippet module_supervisor
	-behaviour(supervisor).
      
	-export([start_link/0, init/1]).

	start_link() ->
      	supervisor:start_link({local, ?MODULE}, ?MODULE, []).

	init([]) ->
		AChild = #{
			id => 'AName',
			start => {'AModule', start_link, []},
			restart => permanent,
			shutdown => 2000,
			type => worker,
			modules => ['AModule']},
	     {ok, {#{
			strategy => one_for_one,
			intensity => 5,
			period => 30},
			[AChild]}}.
